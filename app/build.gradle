apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.parkingapp"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        debug {
            testCoverageEnabled true
        }
    }
    jacoco {
        version "0.7.1.201405082137"
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}
jacoco {
    version "0.7.1.201405082137"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //Dependencies Room
    def room_version = "2.2.0-beta01"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0-alpha02'

    def material_google = "1.0.0"
    implementation "com.google.android.material:material:$material_google"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    debugImplementation 'com.idescout.sql:sqlscout-server:4.1'
    releaseImplementation 'com.idescout.sql:sqlscout-server-noop:4.1'

    // Testing-only dependencies
    def coreVersion = "1.3.0-alpha03"
    def extJUnitVersion = "1.1.2-alpha03"
    def runnerVersion = "1.3.0-alpha03"
    def rulesVersion = "1.3.0-alpha03"
    //mokito
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test:core:' + coreVersion;
    androidTestImplementation 'androidx.test.ext:junit:' + extJUnitVersion;
    androidTestImplementation 'androidx.test:runner:' + runnerVersion;
    androidTestImplementation 'androidx.test:rules:' + rulesVersion

    testImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'org.robolectric:robolectric:4.3'





}
